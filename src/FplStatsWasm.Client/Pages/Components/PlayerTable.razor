@inject IJSRuntime Js

<p>Showing players data</p>

<div class="form-group">
    <input class="form-control" type="text" placeholder="search..."
           @bind=Filter
           @bind:event="oninput">
</div>


<table @ref="TableRef" class="table table-striped sortable">
    <thead>
        <tr>
            <th>First name</th>
            <th>Second name</th>
            @if (ShowPlayerPosition)
            {
                <th>Position</th>
            }
            <th>Team</th>
            <th>Total points</th>
            <th>Price</th>
            <th>Minutes</th>
            <th>SelectedByPercent</th>
            <th>PointsOverPrice</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var player in Players)
        {
            @if (!IsVisible(player))
                continue;

            <tr>
                <td>@player.FirstName</td>
                <td>@player.SecondName</td>
                @if (ShowPlayerPosition)
                {
                    <th>@player.Position</th>
                }
                <td>@player.Team</td>
                <td>@player.TotalPoints</td>
                <td>@player.PriceF</td>
                <td>@player.Minutes</td>
                <td>@player.SelectedByPercent</td>
                <td>@player.PointsOverPrice</td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public IEnumerable<Player>? Players { get; set; }

    [Parameter]
    public ElementReference TableRef { get; set; }

    [Parameter]
    public bool ShowPlayerPosition { get; set; } = false;

    private string? Filter { get; set; }

    private bool IsVisible(Player player)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;
    
        if (player.FirstName.StartsWith(Filter, StringComparison.InvariantCultureIgnoreCase) ||
            player.SecondName.StartsWith(Filter, StringComparison.InvariantCultureIgnoreCase))
            return true;
    
        return false;
    }

    public async Task SortTableInvokeJsAsync(){
        
        await Js.InvokeVoidAsync("sorttable.makeSortable", TableRef);
    } 
}